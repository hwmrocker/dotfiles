#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    InterceptResolver - proxy requests to upstream server
                        (optionally intercepting)

"""
from __future__ import print_function

import socket

from dnslib import DNSRecord, RR, QTYPE, RCODE, parse_time
from dnslib.server import DNSServer, DNSHandler, BaseResolver, DNSLogger
from dnslib.label import DNSLabel
import random


class InterceptResolver(BaseResolver):

    """
        Intercepting resolver

        Proxy requests to upstream server optionally intercepting requests
        matching local records
    """

    def __init__(self, timeout=0):
        """
            address/port    - upstream server
            ttl             - default ttl for intercept records
            intercept       - list of wildcard RRs to respond to (zone format)
            skip            - list of wildcard labels to skip
            nxdomain        - list of wildcard labels to retudn NXDOMAIN
            timeout         - timeout for upstream server
        """
        self.timeout = timeout
        self.zone = []

    def resolve(self, request, handler):
        reply = request.reply()
        qname = request.q.qname
        qname_str = str(qname)
        qtype = QTYPE[request.q.qtype]
        print(qname)

        #if qname_str.endswith(".trv.") or qname_str.endswith(".trv.cloud.") or qname_str.endswith(".consul."):
        if any(qname_str.endswith(ending) for ending in [".trv.", ".trv.cloud.", ".consul."]):
            # use trv dns
            address = random.choice(["172.20.4.8", "172.20.4.7"])
        elif "google" in qname_str:
            address = random.choice(["8.8.8.8", "4.4.4.4"])
        else:
            address = random.choice(["1.0.0.1", "1.1.1.1"])
        try:
            use_tcp = not handler.protocol == "udp"
            proxy_r = request.send(address, 53, tcp=use_tcp, timeout=self.timeout)
            reply = DNSRecord.parse(proxy_r)

        except socket.timeout:
            reply.header.rcode = getattr(RCODE, "NXDOMAIN")
        return reply


if __name__ == "__main__":

    import argparse, time

    p = argparse.ArgumentParser(description="DNS Intercept Proxy")
    p.add_argument(
        "--timeout",
        "-o",
        type=float,
        default=5,
        metavar="<timeout>",
        help="Upstream timeout (default: 5s)",
    )
    p.add_argument("--tcp",action='store_true',default=False,
                    help="TCP proxy (default: UDP only)")
    args = p.parse_args()

    resolver = InterceptResolver(args.timeout)
    logger = DNSLogger("request,reply,truncated,error", False)

    print("Starting DNS Proxy")

    DNSHandler.log = {
        "log_request",  # DNS Request
        "log_reply",  # DNS Response
        "log_truncated",  # Truncated
        "log_error",  # Decoding error
    }

    udp_server = DNSServer(resolver, port=53, address="127.0.0.1", logger=logger)
    udp_server.start_thread()

    if args.tcp:
        tcp_server = DNSServer(
            resolver, port=53, address="127.0.0.1", tcp=True, logger=logger
        )
        tcp_server.start_thread()

    # backup current resolv.conf
    with open("/etc/resolv.conf", "r") as fh:
        old_conf = fh.read()
        print(old_conf)

    # set this nameserver in resolve.conf
    with open("/etc/resolv.conf", "w") as fh:
        fh.write("nameserver 127.0.0.1\nameserver ::1\n")
    try:
        while udp_server.isAlive():
            time.sleep(1)
    except KeyboardInterrupt as e:
        pass
    finally:
        # server has been stopped, we are restoring resolv.conf
        with open("/etc/resolv.conf", "w") as fh:
            fh.write(old_conf)
